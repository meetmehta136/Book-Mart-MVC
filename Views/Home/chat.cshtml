@{
    ViewData["Title"] = "BookMart Chat";
}

@using System.Text.RegularExpressions;
@using System.Linq;

@functions {
    string FormatResponse(string response)
    {
        string formattedResponse = Regex.Replace(response, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        var lines = formattedResponse.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries).Where(l => !string.IsNullOrWhiteSpace(l)).ToList();
        if (lines.Count > 1)
        {
            formattedResponse = "<ul><li>" + string.Join("</li><li>", lines) + "</li></ul>";
        }
        return formattedResponse;
    }
}

<div class="container my-5">
    <h2 class="mb-4 text-center title">BookMart Assistant</h2>

    <!-- Chat Box -->
    <div class="chat-box mb-3" id="chatBox">
        @if (ViewBag.History != null)
        {
            @foreach (var msg in ViewBag.History)
            {
                if (msg.Sender == "user")
                {
                    <div class="message user-message fade-in">
                        <div class="bubble">
                            <strong>You:</strong> @msg.Text
                        </div>
                    </div>
                }
                else
                {
                    <div class="message assistant-message fade-in">
                        <div class="bubble">
                            <strong>Bot:</strong>
                            <div>@Html.Raw(FormatResponse(msg.Text))</div>
                        </div>
                    </div>
                }
            }
        }

        @if (ViewBag.UserMessage != null)
        {
            <!-- User Message -->
            <div class="message user-message fade-in">
                <div class="bubble">
                    <strong>You:</strong> @ViewBag.UserMessage
                </div>
            </div>

            <!-- Assistant Thinking -->
            <div class="message assistant-message fade-in" id="thinkingBubble">
                <div class="bubble">
                    <strong>Bot:</strong>
                    <span class="typing-dots">
                        <span></span><span></span><span></span>
                    </span>
                </div>
            </div>

            <!-- Hidden Assistant Response -->
            <div class="message assistant-message fade-in" id="assistantResponse" style="display:none;">
                <div class="bubble">
                    <strong>Bot:</strong>
                    <div>@Html.Raw(FormatResponse(ViewBag.Response ?? ""))</div>
                </div>
            </div>
        }
    </div>

    <!-- Predefined Buttons -->
    <div class="predefined-buttons mb-3">
        <button type="button" class="btn btn-outline-primary" onclick="sendPredefined('Hello')">Hello</button>
        <button type="button" class="btn btn-outline-primary" onclick="sendPredefined('Give me all book details')">All Book Details</button>
        <button type="button" class="btn btn-outline-primary" onclick="sendPredefined('Recommend a book')">Recommend a Book</button>
        
        @if (User.Identity.IsAuthenticated)
        {
            <button type="button" class="btn btn-outline-success" onclick="sendPredefined('Show my orders')">My Orders</button>
            <button type="button" class="btn btn-outline-success" onclick="sendPredefined('Show my cart')">My Cart</button>
            <button type="button" class="btn btn-outline-success" onclick="sendPredefined('Show my profile')">My Profile</button>
        }
        <button type="button" class="btn btn-outline-danger" onclick="clearChat()">Clear Chat</button>
    </div>

    <!-- Input -->
    <form method="post" class="chat-input" id="chatForm">
        <div class="input-group">
            <input type="text" name="userMessage" id="userMessage" class="form-control" placeholder="Ask about books..." required />
            <button type="submit" class="btn btn-primary">Send</button>
        </div>
    </form>
</div>

<style>
    body {
        background: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .title {
        color: #1c2b3a;
        font-weight: 600;
        letter-spacing: 1px;
    }

    /* Chat container */
    .chat-box {
        border-radius: 15px;
        padding: 20px;
        height: 450px;
        overflow-y: auto;
        background: #ffffff;
        display: flex;
        flex-direction: column;
        gap: 12px;
        border: 1px solid #dee2e6;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

        .chat-box::-webkit-scrollbar {
            width: 8px;
        }

        .chat-box::-webkit-scrollbar-thumb {
            background: #1c2b3a;
            border-radius: 10px;
        }

        .chat-box::-webkit-scrollbar-track {
            background: #e9ecef;
        }

    /* Messages */
    .message {
        display: flex;
        align-items: flex-end;
    }

    .user-message {
        justify-content: flex-end;
    }

        .user-message .bubble {
            background: #1c2b3a;
            color: #fff;
            border-radius: 12px 12px 0 12px;
            padding: 12px 18px;
            max-width: 70%;
            white-space: pre-line;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .assistant-message {
        justify-content: flex-start;
    }

        .assistant-message .bubble {
            background: #f1f3f5;
            color: #1c2b3a;
            border-radius: 12px 12px 12px 0;
            padding: 12px 18px;
            max-width: 70%;
            white-space: pre-line;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }

    /* Fade-in animation */
    .fade-in {
        opacity: 0;
        animation: fadeIn 0.6s ease-in-out forwards;
    }
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Typing dots */
    .typing-dots span {
        display: inline-block;
        width: 7px;
        height: 7px;
        margin: 0 3px;
        background: #1c2b3a;
        border-radius: 50%;
        animation: blink 1.4s infinite both;
    }

        .typing-dots span:nth-child(1) {
            animation-delay: 0s;
        }

        .typing-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }
    @@keyframes blink {
        0%,80%,100%

    {
        opacity: 0;
    }

    40% {
        opacity: 1;
    }

    }

    /* Chat input */
    .chat-input {
        margin-top: 15px;
    }

        .chat-input .form-control {
            border-radius: 25px 0 0 25px;
            border: 1px solid #dee2e6;
        }

        .chat-input .btn {
            border-radius: 0 25px 25px 0;
            background: #1c2b3a;
            color: #fff;
            border: none;
        }

            .chat-input .btn:hover {
                background: #2c3e50;
            }

    /* Predefined buttons */
    .predefined-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

        .predefined-buttons .btn {
            border-radius: 25px;
        }

    /* Lists inside assistant bubble */
    .assistant-message ul {
        margin: 5px 0;
        padding-left: 20px;
    }

    .assistant-message li {
        margin-bottom: 4px;
    }
</style>

<script>
    // Show assistant response after typing animation
    window.addEventListener("DOMContentLoaded", () => {
        const thinking = document.getElementById("thinkingBubble");
        const response = document.getElementById("assistantResponse");

        if (thinking && response) {
            setTimeout(() => {
                thinking.style.display = "none";
                response.style.display = "flex";
                const chatBox = document.getElementById("chatBox");
                chatBox.scrollTop = chatBox.scrollHeight;
            }, 3000);
        }
    });

    // Send predefined button text
    function sendPredefined(text) {
        const input = document.getElementById("userMessage");
        input.value = text;
        document.getElementById("chatForm").submit();
    }

    // Clear chat history
    function clearChat() {
        if (confirm('Are you sure you want to clear the chat history?')) {
            window.location.href = '/Home/ClearChat';
        }
    }
</script>
